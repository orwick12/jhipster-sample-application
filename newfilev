import java.security.*;
import java.security.spec.InvalidKeySpecException;
import java.io.UnsupportedEncodingException;
import java.util.Arrays;

import javax.crypto.Cipher;
import javax.crypto.Mac;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;

import java.util.Base64;
import java.util.Base64.Encoder;


public class Main {

    static String plainText = "hi there dsk afs  asdd fas";
    static String password = "OurSvsModKeyPull"; // will be pulled from environment

    final private static String MAC_ALGORITHM = "HmacSHA256";
    final private static String KEY_ALGORITHM = "PBKDF2WithHmacSHA1";
    final private static String ENCRYPTION_ALGORITHM = "AES/CBC/PKCS5Padding";
    final private static String RANDOM_ALGORITHM = "SHA1PRNG";
    final private static String AES = "AES";
    final private static int ITERATIONS = 5000;
    final private static int KEY_LENGTH = 128;

  public static void main(String[] args) throws Exception
  {
    Main thing = new Main();
    System.out.println("");
    String encryptedMessage = thing.encrypt(plainText, password);
    System.out.println(encryptedMessage + " final encrypted output");
    String decryptedMessage = thing.decrypt(encryptedMessage, password);
    System.out.println(decryptedMessage +  " decrypted output");
  }
    private String encrypt(String plainText, String password) throws Exception
    {

        SecureRandom random = SecureRandom.getInstance(RANDOM_ALGORITHM);

        byte[] encryptionSalt = new byte[20];
        random.nextBytes(encryptionSalt);
        byte[] ekey = getKey(password, encryptionSalt, ITERATIONS, KEY_LENGTH);
        SecretKeySpec encryptionKey = new SecretKeySpec(ekey, AES);
        Cipher cipher = Cipher.getInstance(ENCRYPTION_ALGORITHM);
        cipher.init(Cipher.ENCRYPT_MODE, encryptionKey, new IvParameterSpec(new byte[16]));
        byte[] cipheredPlainText = cipher.doFinal(plainText.getBytes("UTF-8"));
        System.out.println(cipheredPlainText.length + " ciphered plaintext");

        byte[] macSalt = new byte[20];
        random.nextBytes(macSalt);
        byte[] mKey = getKey(password, macSalt, ITERATIONS, KEY_LENGTH);;
        SecretKeySpec macKey = new SecretKeySpec(mKey, MAC_ALGORITHM);
        Mac mac = Mac.getInstance(MAC_ALGORITHM);
        mac.init(macKey);
        byte[] hmac = mac.doFinal(cipheredPlainText);
        System.out.println("Encryption Method: Hmac" + hmac.length);
        String encryptedMessage = concatEncryptions(encryptionSalt, macSalt, cipheredPlainText, hmac);

        return encryptedMessage;

    }

    private String concatEncryptions(byte[] encryptionSalt, byte[] macSalt, byte[] cipheredPlainText, byte[] hmac)
    {
        byte[] concatMessage = new byte[encryptionSalt.length + macSalt.length + cipheredPlainText.length + 
        hmac.length];

        System.arraycopy(encryptionSalt, 0, concatMessage, 0, encryptionSalt.length);
        System.arraycopy(macSalt, 0, concatMessage, encryptionSalt.length, macSalt.length);
        System.arraycopy(cipheredPlainText, 0, concatMessage, macSalt.length, cipheredPlainText.length);
        System.arraycopy(hmac, 0, concatMessage, cipheredPlainText.length, hmac.length);
        byte[] hmacBytes = Arrays.copyOfRange(concatMessage, concatMessage.length - 32, concatMessage.length);
        System.out.println("EncryptionMethod: " + macSalt + " salt " + hmacBytes + " hmac");
        String outgoingMessage = new String(Base64.getEncoder().encodeToString(concatMessage));
        return outgoingMessage;
    }


    private byte[] getKey(String password, byte[] salt, int ITERATIONS, int KEY_LENGTH ) throws Exception {
        SecretKeyFactory factory = SecretKeyFactory.getInstance(KEY_ALGORITHM);
        SecretKey key = factory.generateSecret(new PBEKeySpec(password.toCharArray(),salt, ITERATIONS, KEY_LENGTH));
        byte[] keyBytes = key.getEncoded();
        return keyBytes;
    }

    public String decrypt(String incomingMessage, String password) throws Exception
    {
      byte[] encryptedMessage = Base64.getDecoder().decode(incomingMessage);
      System.out.println("Decryption Method: encryptedMessage " + encryptedMessage);
      if(encryptedMessage.length < 119)
      {
        byte[] hmacBytes = Arrays.copyOfRange(encryptedMessage, encryptedMessage.length - 32, encryptedMessage.length);
        byte[] macSalt = Arrays.copyOfRange(encryptedMessage, 20, 40);
        byte[] encryptedSalt = Arrays.copyOfRange(encryptedMessage, 0, 20);
        byte[] cipheredPlainText = Arrays.copyOfRange(encryptedMessage, 40, encryptedMessage.length - 32);

        System.out.println("Decrypt " + hmacBytes + " hmac");
        byte[] mKey = getKey(password, macSalt, ITERATIONS, KEY_LENGTH);
        SecretKeySpec macKey = new SecretKeySpec(mKey, MAC_ALGORITHM);
        Mac mac = Mac.getInstance(MAC_ALGORITHM);
        mac.init(macKey);
        byte[] hmac = mac.doFinal(cipheredPlainText); 
        System.out.println("Decrypt hmac after algo " +hmac );

        String sit =  "hi";
        return sit;
      }
      String sit =  "hi";
        return sit;
    }

}
